services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_started
      beat:
        condition: service_started
      flower:
        condition: service_started

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TASK_IGNORE_RESULT=True
      - BEAT_SCHEDULE=120
      - PYTHONPATH=/app
    command: celery -A extensions.celery worker --loglevel=info
    volumes:
      - .:/app

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TASK_IGNORE_RESULT=True
      - BEAT_SCHEDULE=120
      - GROQ_API_KEY=${GROQ_API_KEY}
      - PYTHONPATH=/app
    command: celery -A extensions.celery beat --loglevel=info
    volumes:
      - .:/app

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
      - worker
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TASK_IGNORE_RESULT=True
      - BEAT_SCHEDULE=120
      - GROQ_API_KEY=${GROQ_API_KEY}
      - PYTHONPATH=/app
    command: celery -A extensions.celery flower --port=5555
    volumes:
      - .:/app

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=whispercore
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=whispercore
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whispercore"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
